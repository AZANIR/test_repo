name: "Playwright with pluggin"
on:
    workflow_dispatch:
        inputs:
            stage_url:
                description: 'Select an environment: "dev" , "local"'
                required: true
                default: "https://backoffice-dev.eu.ballerine.io"
            workflow_definition_id:
                description: 'Set a workflow definition id'
                required: true
                default: "kyb_dynamic_ui_session_example"
            qase_report:
                description: "Choose qase report option: on(1) / off(0)"
                required: false
                default: "0"
            base_api_url:
                description: "Set api url default or custom"
                required: true
                default: "https://api-dev.eu.ballerine.io"
            clips_pay_token:
                description: "Set clips pay token default or custom"
                required: true
                default: ""
            trace:
                type: choice
                description: "Choose trace option: on / off / retain-on-failure"
                required: false
                default: "off"
                options:
                    - "retain-on-failure"
                    - "on"
                    - "off"
            login:
                description: "Set login option: default or custom"
                required: true
                default: "admin@admin.com"
            password:
                description: "Set password option: default or custom"
                required: true
                default: "admin"
            api_token_github:
                description: "GitHub token"
                required: true
                default: ""

jobs:
    Run_tests:
        timeout-minutes: 60
        runs-on: ubuntu-20.04
        env:
            STAGE_URL: ${{ inputs.stage_url }}
            QASE_REPORT: ${{ inputs.qase_report }}
            BASE_API_URL: ${{ inputs.base_api_url }}
            CLIPS_PAY_TOKEN: ${{ inputs.clips_pay_token }}
            TRACE: ${{ inputs.trace }}
            LOGIN: ${{ inputs.login }}
            PASSWORD: ${{ inputs.password }}
            API_TOKEN_GITHUB: ${{ inputs.api_token_github }}
            WORKFLOW_DEFINITION_ID: ${{ inputs.workflow_definition_id }}
        permissions:
            contents: read
            issues: read
            checks: write
            pull-requests: write
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 22
            # - name : Create app directory
            #   run: |
            #     sudo chown -R $USER:$USER .
            #     sudo mkdir app
            #     ls -la
            # - name: Load local env
            #   working-directory: ./app
            #   run: sudo git clone https://github.com/ballerine-io/ballerine.git --recursive
            # - name: Setup and run local env
            #   working-directory: ./app/ballerine
            #   run: |
            #     sudo chown -R $USER:$USER .
            #     sudo npm install -g pnpm
            #     sudo npm install -g concurrently
            #     sudo git clone https://$API_TOKEN_GITHUB@github.com/ballerine-io/wf-data-migration.git services/workflows-service/prisma/data-migrations
            # - name: Checkout data migration
            #   working-directory: ./app/ballerine/services/workflows-service/prisma/data-migrations
            #   run: sudo git checkout 697e912ea33d5c58d10d73fdf961ac17d1382fd8 -f
            # - name: Run data setup
            #   working-directory: ./app/ballerine
            #   run: |
            #     sudo chown -R $USER:$USER .
            #     sudo pnpm install
            #     sudo pnpm monorepo:init
            # - name: Run db
            #   working-directory: ./app/ballerine/services/workflows-service
            #   run:  npm run docker:db
            # - name: Run data migration
            #   working-directory: ./app/ballerine/services/workflows-service
            #   run: |
            #     sudo chown -R $USER:$USER .
            #     sudo pnpm run db:data-migration:migrate || true
            # - name: Run server
            #   working-directory: ./app/ballerine
            #   run: |
            #     sudo chown -R $USER:$USER .
            #     npm pkg set scripts.testrun="concurrently \"nx run @ballerine/workflows-service:dev\" \"wait-on http://localhost:3000/api/v1/_health/ready && nx run-many --target=dev --projects=@ballerine/kyb-app,@ballerine/backoffice-v2\""
            #     pnpm run testrun &
            #     sleep 120
            - name: Install dependencies and browsers
              run: |
                  npm install
                  npx playwright install --with-deps chromium
            - name: Run Playwright Tests
              run: export BASE_URL="$STAGE_URL" WORKFLOW_DEFINITION_ID="$WORKFLOW_DEFINITION_ID" LOGIN_EMAIL="$LOGIN" LOGIN_PASSWORD="$PASSWORD" BASE_API_URL="$BASE_API_URL" CLIPS_PAY_TOKEN="$CLIPS_PAY_TOKEN" && npx playwright test --trace "$TRACE"
            - name: Generate Report
              if: always()
              run: npx allure generate allure-results --clean
            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: playwright-report
                  path: playwright-report
                  retention-days: 25
            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: allure-report
                  path: allure-report
                  retention-days: 25
            - name: Wait for Artifacts to be ready
              if: always()
              run: |
                sleep 10
                  ls junit-report/ -la
            # publish to github actions
            - name: Publish Playwright Test on the github pages
              if: always()
              uses: peaceiris/actions-gh-pages@v4
              with:
                  github_token: ${{ secrets.ACCES_TOKEN }}
                  publish_dir: ./public
            # create Jest report
            - name: Test Report
              uses: dorny/test-reporter@v1
              if: success() || failure() # run this step even if previous step failed
              with:
                  name: JEST Tests
                  path: junit-report/jest-junit.xml
                  reporter: jest-junit
            # crsf pluggin 
            - name: Publish CTRF Test Summary Results
              run: npx github-actions-ctrf tests ctrf/ctrf-report.json
              if: always()
            # publish unit test results
            - name: Publish Test Results
              uses: EnricoMi/publish-unit-test-result-action@v2
              if: always()
              with:
                  files: |
                      junit-report/*.xml
                      junit-report/*.json
            # deploy to netlify tests-pw-report
            - name: Deploy to Netlify tests-pw-report
              uses: nwtgck/actions-netlify@v3.0
              if: always()
              with:
                publish-dir: './playwright-report'
                production-branch: master
                github-token: $API_TOKEN_GITHUB
                deploy-message: "Deploy from GitHub Actions tests-pw-report"
                enable-pull-request-comment: false
                enable-commit-comment: true
                overwrites-pull-request-comment: true
                production-deploy: true
              env:
                NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
                NETLIFY_SITE_ID: 6dab82b5-d56c-4ce3-a6f2-90855b884bd6
              timeout-minutes: 1
            # deploy to netlify tests-allure-report
            - name: Deploy to Netlify tests-allure-report
              uses: nwtgck/actions-netlify@v3.0
              if: always()
              with:
                publish-dir: './allure-report'
                production-branch: master
                github-token: $API_TOKEN_GITHUB
                deploy-message: "Deploy from GitHub Actions tests-allure-report"
                enable-pull-request-comment: false
                enable-commit-comment: true
                overwrites-pull-request-comment: true
                production-deploy: true
              env:
                NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
                NETLIFY_SITE_ID: 36c92055-994a-4f81-8920-9e98c9ffb487
              timeout-minutes: 1  
